# ======================
# PATH Configuration
# ======================
export PATH="$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH"
export PATH="$PATH:/opt/nvim:/usr/local/go/bin"

# ======================
# Oh My Zsh Configuration
# ======================
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"
plugins=(git zsh-autosuggestions)
source $ZSH/oh-my-zsh.sh

# ======================
# Aliases
# ======================
alias fd='fdfind'

# Compilation Aliases
function _makec() {
  gcc -Wall -Wextra -std=c11 -O2 "$1" -o "${1%.*}" && 
    echo "Compiled successfully to ${1%.*}"
  }
  alias makec='_makec'

  function _makecpp() {
    g++ -Wall -Wextra -std=c++17 -O2 "$1" -o "${1%.*}" && 
      echo "Compiled successfully to ${1%.*}"
    }
    alias makecpp='_makecpp'

    function _make() {
      if [[ "$1" == *.c ]]; then
        makec "$1"
      elif [[ "$1" == *.(cpp|cc|cxx) ]]; then
        makecpp "$1"
      else
        echo "Unsupported file type"
      fi
    }
    alias make='_make'



# ======================
# FZF Configuration (Fixed Key Bindings)
# ======================

# FD commands (using fdfind for Debian compatibility)
export FZF_DEFAULT_COMMAND="fdfind --type f --hidden --strip-cwd-prefix --exclude '.git'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fdfind --type d --hidden --strip-cwd-prefix --exclude '.git'"

# FZF display options
export FZF_DEFAULT_OPTS="--height 50% --layout=default --border --color=hl:#2dd4bf"

# Preview configurations
export FZF_CTRL_T_OPTS="--preview 'bat --color=always --line-range :500 {} 2>/dev/null || cat {}'"
export FZF_ALT_C_OPTS="--preview 'eza --icons=always --tree --color=always {} 2>/dev/null | head -200 || ls -la {}'"

# TMUX options
export FZF_TMUX_OPTS="-p90%,70%"

# ======================
# Key Bindings Setup
# ======================

# Ensure FZF key bindings are properly sourced
if [[ -f /usr/share/doc/fzf/examples/key-bindings.zsh ]]; then
    source /usr/share/doc/fzf/examples/key-bindings.zsh  # Debian/Ubuntu location
elif [[ -f /usr/share/fzf/key-bindings.zsh ]]; then
    source /usr/share/fzf/key-bindings.zsh  # Other Linux distros
elif [[ -f ~/.fzf.zsh ]]; then
    source ~/.fzf.zsh  # Manual installation
fi

# Verify key bindings are set
bindkey -r '^T' 2>/dev/null  # Remove any existing Ctrl-T binding
bindkey -r '^[c' 2>/dev/null # Remove any existing Alt-C binding
# ======================
# Tool Initializations
# ======================

# Conda
conda_setup="$('/home/habert/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
  eval "$conda_setup"
else
  if [ -f "/home/habert/anaconda3/etc/profile.d/conda.sh" ]; then
    . "/home/habert/anaconda3/etc/profile.d/conda.sh"
  else
    export PATH="/home/habert/anaconda3/bin:$PATH"
  fi
fi
unset conda_setup

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Load nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # Load nvm completion

# Deno
. "/home/habert/.deno/env"
export PATH="/usr/local/bin:$PATH"
